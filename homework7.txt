1.Copy text of this task (only task 1) into a file. Using only grep get words which have more than 5letters and have no any other symbols or figures.

Hint: use grep -o -e (-o prints only the matching part of the lines. -e allows to use regexp)

[dmitrii@localhost ~]$ mkdir Homework7
[dmitrii@localhost ~]$ cd Homework7
[dmitrii@localhost Homework7]$ vim text

/*
text:
****

Copy text of this task (only task 1) into a file. Using only grep get words which have more than 5letters and have no any other symbols or figures.

Hint: use grep -o -e (-o prints only the matching part of the lines. -e allows to use regexp)
*/

[dmitrii@localhost Homework7]$ vim serch.sh
[dmitrii@localhost Homework7]$ chmod u+x serch.sh

/*
serch.sh:
****

#!/bin/bash

grep -Ewo "[a-zA-Z]+{5,}" text
*/

[dmitrii@localhost Homework7]$ ./serch.sh
Using
words
which
letters
other
symbols
figures
prints
matching
lines
allows
regexp

2.Create a text file with the following lines. Write a script which read a file and put each line into an array only if it doesn't contain "a" letter. Print the array after this, and how much indexes it has. The output should be like this.

[dmitrii@localhost ~]$ mkdir Homework7
[dmitrii@localhost ~]$ vim cities.txt

/*
cities.txt:

Moscow
Saint-Petersburg
Novosibirsk
Yekaterinburg
Nizhny Novgorod
Kazan
Chelyabinsk
Omsk
Samara
Rostov-on-Don
Ufa
Krasnoyarsk
Perm
Voronezh
Volgograd
*/

[dmitrii@localhost ~]$ vim script.sh
[dmitrii@localhost ~]$ chmod u+x script.sh
[dmitrii@localhost ~]$ ./script.sh
Moscow
Novosibirsk
Nizhny Novgorod
Omsk
Rostov-on-Don
Perm
Voronezh
7

/*
script.sh:
****
#!/bin/bash

cp /dev/null result

IFS=$'\n'
for CITY in $(sed '/a/d' cities.txt); do
        echo $CITY | tee -a result;
done

awk 'END{print NR}' result
*/

/*
#!/bin/bash

input="cities"
result=()
i=0

while read CITY
do
        if [[ ! $CITY =~ [a] ]]
        then
                result[$i]=$CITY
                echo "${result[$i]}"
                ((i++))
        fi
done < $input
SIZE=${#result[@]}
echo $SIZE
*/

/*
vim cities:

Moscow
Saint-Petersburg
Novosibirsk
Yekaterinburg
Nizhny Novgorod
Kazan
Chelyabinsk
Omsk
Samara
Rostov-on-Don
Ufa
Krasnoyarsk
Perm
Voronezh
Volgograd
*/

[root@localhost dmitrii]# ./scrypt2.sh 
Moscow
Novosibirsk
Nizhny Novgorod
Omsk
Rostov-on-Don
Perm
Voronezh
7

3. Extra. 
Write a daemon, which works in a background and checks who is logged in on your server every 15 seconds, the script should have an array with the list of trusted users, and if there any user on the server who is not in this list, script should log out him (kill -HUP can help). Check it by logging as a user who is not in a list and ensures that he logged out. 

1) Creating files daemon.sh, user_list, AllUser_arr

[root@localhost tmp]# ls -lh
итого 100K
-rw-r--r--  1 root    root     13 ноя 29 19:05 AllUser_arr
-rwxr-xr-x. 1 root    root    396 ноя 29 19:06 daemon.sh
drwx------. 3 root    root     17 ноя 20 18:34 systemd-private-47d1ec69a5454035a0616571d83ec00c-chronyd.service-SLsttj
drwx------  3 root    root     17 ноя 29 17:16 systemd-private-9563e7d0f021449fa16afc3b1916f2d2-chronyd.service-RMtZ7G
drwx------. 3 root    root     17 ноя 19 20:54 systemd-private-df3f6ce28aed4c58b7babbc793b0d2af-chronyd.service-BF6Dhq
-rw-------. 1 root    root    696 ноя 25 00:45 tmpGiopLO
-rw-rw-r--  1 dmitrii dmitrii  15 ноя 29 17:42 user_list
-rw-------. 1 root    root    77K ноя 22 23:21 yum_save_tx.2018-11-22.23-21.iVfiB2.yumtx
-rw-------. 1 root    root    242 ноя 24 23:49 yum_save_tx.2018-11-24.23-49.bNIuQ1.yumtx


/*
daemon.sh:
****

#!/bin/bash

who | awk '{ printf ("%s",$1 "\n"); }' > /tmp/AllUser_arr

allUser_arr=$(cat /tmp/AllUser_arr)
allowed_arr=$(cat /tmp/user_list)
approved_User=()

for user in $allUser_arr; do

        for allowed_user in $allowed_arr; do

                if [[ ${allowed_user} == ${user} ]]
                        then approved_User+=($user)
                fi
        done
done

if [[ ! " ${approved_User[@]} " =~ " ${user} " ]]; then
        pkill -u ${user}
fi
*/

/*
user_list:
****
john
alex
root
...
smb
*/

2) I used systemd, because cron doesn't work with second time intervals.

[root@localhost Homework7]# cd /etc/systemd/system
[root@localhost system]# vim homework7.service
[root@localhost system]# vim homework7.timer

/*
homework7.timer
****

[Unit]
Description=Homework7

[Timer]
OnCalendar=*-*-* *:*:15
Unit=homework7.service
*/

/*
homework7.service
****

[Unit]
Description=Homework7

[Service]
Type=forking
ExecStart=/tmp/daemon.sh
*/

[root@localhost Homework7]# systemctl enable homework7.timer
[root@localhost Homework7]# systemctl start homework7.timer
[root@localhost Homework7]# systemctl is-active homework7.timer
active
systemctl daemon-reload
[root@localhost tmp]# systemctl status homework7
● homework7.service - Homework7
   Loaded: loaded (/etc/systemd/system/homework7.service; static; vendor preset: disabled)
   Active: activating (start) since Пн 2018-11-19 21:14:10 MSK; 26ms ago
  Control: 1608
   CGroup: /system.slice/homework7.service

ноя 19 21:14:10 localhost.localdomain systemd[1]: Starting Homework7...
ноя 19 21:14:10 localhost.localdomain systemd[1]: Started Homework7.

/*
MacBook-Air-User:~ user$ ssh dmitrii@centos
dmitrii@192.168.56.101's password: 
Last login: Mon Nov 19 21:12:01 2018 from 192.168.56.1
[dmitrii@localhost ~]$ Connection to 192.168.56.101 closed by remote host.
Connection to 192.168.56.101 closed.
MacBook-Air-User:~ user$ 
*/

